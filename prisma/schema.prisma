generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Begin NEXT AUTH
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// End NEXT AUTH

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  username          String?
  isGoogle          Boolean          @default(false)
  password          String?
  institution       String?
  favoriteSubjectId String?
  favoriteSubject   Subject?         @relation(fields: [favoriteSubjectId], references: [id])
  graduations       UserGraduation[]
  posts             Post[]
  answers           Answer[]
  reactions         Reaction[]

  // Begin NEXT AUTH
  image         String?
  emailVerified DateTime?
  name          String?
  accounts      Account[]
  sessions      Session[]
  // End NEXT AUTH

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Subject {
  id             String           @id @default(uuid())
  name           String
  UserGraduation UserGraduation[]
  User           User[]
  Post           Post[]
}

model UserGraduation {
  id        String          @id @default(uuid())
  area      String
  level     GraduationLevel
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  subject   Subject         @relation(fields: [subjectId], references: [id])
  subjectId String
}

enum GraduationLevel {
  TECNOLOGO
  BACHARELADO
  LICENSIATURA
  POS_GRADUACAO
  MESTRADO
  DOUTORADO
  POS_DOUTORADO
}

model Post {
  id     String  @id @default(uuid())
  body   String
  title  String
  closed Boolean @default(false)

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  answers   Answer[]
  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Answer {
  id   String @id @default(uuid())
  body String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Reaction {
  id String @id @default(uuid())

  value Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String?

  createdAt DateTime @default(now())
}
